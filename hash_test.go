package main

import (
	"encoding/hex"
	"fmt"
	"testing"
	"unsafe"

	"github.com/Asherda/lightwalletd/parser/verushash"
)

// VerusHash holds the VerusHash object used for the VerusCoin hashing methods
var VerusHash = verushash.NewVerushash()

func checkV2b2hash(header string, expected string) bool {
	vh2_testdata, err := hex.DecodeString(header)
	if err != nil || len(vh2_testdata) < 1 {
		fmt.Printf("Failed to decode '%s'\n", header)
		return false
	} else {
		//fmt.Printf("Hashing '%s'\n", header)

		vh2 := string(vh2_testdata[:])
		hash := make([]byte, 32)
		ptrHash := uintptr(unsafe.Pointer(&hash[0]))

		VerusHash.Verushash_v2b2(string(vh2), ptrHash)

		if hex.EncodeToString(hash) != expected {
			fmt.Printf("got %v\nbut expected %v\n", hex.EncodeToString(hash), expected)
			return false
		} else {
			return true
		}
	}
}

func TestHashV2b2(t *testing.T) {
	const hexHeader60 = "0400010092b2615571436fca046d1c69df1e9bec1c94a09dd2f9052bf6baff5d0369f649d4efb54ddcafa0d6e3264f69192eb354f34fb56e944c65258f93c224bb2d30b712961495aee4f850d31c75cfb42470136f80fbe9e9224fc4e0d9843b729cb0181f3ae65ec0a41e1bfe8a1f3100000000000000000c00008008000000020000000000000000000000fdc5d234000000000000000000000000"
	const expected60 = "2bde7623f7b8b4e81e3f15cbe0a803dd4878416093aea3cb0f2c180000000000"
	hh61 := "040001002bde7623f7b8b4e81e3f15cbe0a803dd4878416093aea3cb0f2c180000000000b7fe913797153cf71fafde4e6f72e8d354ad51ad2bca63d361cd538fe4472a7112961495aee4f850d31c75cfb42470136f80fbe9e9224fc4e0d9843b729cb0182c3be65e99622f1b786d0e1aa34bd5bacd294e794fbf6a6fb04e0616bf8c4007546a12307065a478fd00090500000000017308e68628741bfcbbdf9923b99020693a6e8de32d048fd8fc6b5db33e2f67287a42bcc69c7a8490260dc4096feb21d14e37902f75139729bb0d67e0291dedab1e7c1af5b8015c64d39ab44c60ead8317f9f5a9b6c4cee6cbb765c95861c7f0e47fd22b1a1242cb16750c28cf4146a1c33afec3e7abf030000000202010201ba83044805f6ec406c6c807a78088ef190a3d509b88df43c6aff6982a1bb55a50202000201fb10fabf8e1da5ca50c693a583d88f1e7409603a868b1783111856d48cda681d0303bfa039bfa57a1bedffb7c64d04000000000000000000001837040825871500000000000000000079198de3290fdccb5bf863be9b307ca3a7417768dbed3a4a6d9c12b39dc21abe79f520308308000000000000000000007cd4f9f967692a000000000000000000acdab727e9a7bfa245f309aec8654b187cfd2c766c0879ae7e1d75a09323587647bd944c761100000000000000000000bc4f07336f04580000000000000000006e9585eecd861495b70d077529e286284171fecf384a3e9976cc787d5395a45b144e2c60e424000000000000000000008e38dfb2f06b71000000000000000000ed42b63ed776723181dfd59e58285a871668863eadc9d6d0a4ba362bdd18986b8742cec3ed4a00000000000000000000cd7743b4c7c7c30000000000000000008d71f57843ed549fdc023ac6fbb8ddb2647095fbdd0da6e1a7d34b22051cedfa33fc16a0fda200000000000000000000e6d38d7729943101000000000000000067be82d7c0ba8ba6d94cec944d15ea5037965d3b33e2d8465627a789640f873264b8f82a75d801000000000000000000565e9cbf733f260300000000000000005803e8e604ed3d5c540924c9cc92baf0cec2af862cb889516149b057947a43082d95c728aa2904000000000000000000c69c8fa944f06e0600000000000000000daa481c55354dd17ff56e8414ec620aa4b874d6ba25137e89ce9819fd2ffbd96b86b9980da507000000000000000000920713e0ceac410d000000000000000027164e21c9bf733121156a93f447d8172253d15f75249eb01ba7c4822431f963b4e950b952300e000000000000000000a4a8963cd636a8150000000000000000e1baa5c27efc0b26bf15e29a68f10399ac6a7c2a21a72b4ff49dcc846271f1746b8633ba3056150000000000000000001613bc430223db1d0000000000000000b8ae24377c1dcce8bc264ff8126ca5cbe00a0a2508b31da94d26df25ca34b68157ae8c23f3be703608000000000000004d4dd7582b7f5bf34700000000000000df54618bc44d4ee9893e71409e6844f5733240d7e2021f327864254da8d54bbb47dfffcc927874360800000000000000e1bfe155faa8e6f747000000000000000183d45e1817d193b763fe02e88cb0a8594a41aa63e2cd77ee49f71051050e5378f7440d018b743608000000000000007a507fb7e3f2f6f747000000000000000201000000490a7b650212ea0989d2dcbf8d7610664521e6cf9df2b09fc85cc5e6833cce3d9d010400000085202f8901000000020000000000000000000000000000001d1110000000000000000000010000000202000503c0b4a5f20c0c7ef80e6100048505e6166d216c818dbb786d5e6365bd7ed18bfff26188055e6c02e54beabd516a1b5875cbcf0079ea073f9d9c406bdbb486482e14aa7bf0b51b8884ab74ac80715fbc1f2aee8095768552f8d756dc03cdee708504000000220008c1f1e80100001976a91436744cd9ac513f5301fd5c80d28bee3865f9dc2688ac010000000202030503b9266f4056db3e8905d82c435977d5a872fe7b8964619fb26ab1fef292d631217b21729a747ea50e72d48b3bfc94760abfc55cb7269397b7bab4944e8639ad1914aa7bf0b51b8884ab74ac80715fbc1f2aee8095768552f8d756dc03cdee708502000000020201020133f34c5347b84722b6d56bbd3122540eeb59b5639a2b53a815d4f99f8eae5fd60303bfa579bfa57a05ea5e897371090000000000000000000000000000000000000000000000000000e97b5a5ecd9ef76fc08c761317061a807e13ecdd28f13f45e410ffcfc766a522311845406e120000000000000000000099909d61e94910000000000000000000d2fded281f9923fe7d235f1375bd807636698f1ee3ac31917977e49f250e51d778f7440d018b743608000000000000007a507fb7e3f2f6f74700000000000000020002010ef48cb140e79cbe256c4531d786ba93fa0642c32c02f0941573120000000000acd994dc591efd57a4ca71c19ad8b3fa015807f57af8a45e617d2cd3294c9feb33f34c5347b84722b6d56bbd3122540eeb59b5639a2b53a815d4f99f8eae5fd6b98d7e1f1790ccc25de1a995b953bb66b7ebbcdb8a4bf67187e92e5f1b7af13e57fffe500000000000000000f0ffffcf060000001a00000000000000000000000b1c1b1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000002020102016abd64817e4f2f19d1682db053cf654d3a698872dc88cec670a14ddb33655ddf0303bfa578bfa57a0547b9bbccfc080000000000000000000099909d61e94910000000000000000000115545937eba86b85a0bc06431145d0d7cf082d118fa6f88bb8833f0dfa78bb9311845406e120000000000000000000099909d61e94910000000000000000000d2fded281f9923fe7d235f1375bd807636698f1ee3ac31917977e49f250e51d778f7440d018b743608000000000000007a507fb7e3f2f6f7470000000000000002000201acd994dc591efd57a4ca71c19ad8b3fa015807f57af8a45e617d2cd3294c9febe8c8f0403fcf9e05326392f0e1cff5ee469a09e72d7e2a15338a1e12e7b1333d6abd64817e4f2f19d1682db053cf654d3a698872dc88cec670a14ddb33655ddfb98d7e1f1790ccc25de1a995b953bb66b7ebbcdb8a4bf67187e92e5f1b7af13e66b70f1aae76baf492d7d2a1d2e4239e99fd809623e7dcee2012c24843f58757e87b1c1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	const expected61 = "6ceb89dce2f7bdad87a89751e88468f6cb197789292206dcb654fbbda90a9f75"

	if !checkV2b2hash(hexHeader60, expected60) {
		t.Errorf("failed to get the hash for block 1053660 correctly")
	} else {
		fmt.Printf("Got the correct v2b2 hash for block 1053660\n")
	}

	if !checkV2b2hash(hh61, expected61) {
		t.Errorf("failed to get the hash for block 1053661 correctly")
	} else {
		fmt.Printf("Got the correct v2b2 hash for block 1053661!\n")
	}
}
